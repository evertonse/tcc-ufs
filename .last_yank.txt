O
antes de avançar para uma linguagem mais complexa. O capítulo também descreve os testes elaborados para validar a implementação. Além disso, ele apresenta o 
\subsection{Mecanismo de Reflexão de Raios}
% \include{Pos_Textual/Apendices}
Chapter
\subsection{Mecanismo de Reflexão de Raios}
\section{Desenvolvimento}
@{}
d
\begin{codigo}[H]
  \caption{\small Exemplo GLSL de \textit{shader} de vértice.}
 \label{vertex_code1}
\begin{lstlisting}
#version 330 core
layout(location = 0) in vec3 inPosition;
layout(location = 1) in vec3 inNormal;
uniform mat4 modelViewProjection;
out vec3 fragNormal;
void main() {
    vec3 manipulatedPosition = inPosition + (sin(gl_VertexID * 0.1) * 0.1);
    fragNormal = inNormal;
    gl_Position = modelViewProjection * vec4(manipulatedPosition, 1.0);
}
\end{lstlisting}
\end{codigo}
        % \caption{\small Assinatura da função que extrai nós filhos de maniera uniforme para qualquer tipo de nó. }

    \caption{\small Validação de precendencia por parentização de expressões. }

    \caption{\small Validação de precendencia por parentização de expressões. }

\section{Análise Semantica (\texttt{checker})} \label{section-checker}

\section{Análise Semantica (\texttt{checker})} \label{section-checker}



        Outro papel fundamental do \texttt{checker} é garantir que todos os identificadores, abstraido em símbolos na \autoref{subsection-symbols-scopes}, utilizados no programa estejam devidamente definidos antes de serem usados. Essa etapa inclui:

        Outro papel fundamental do \texttt{checker} é garantir que todos os identificadores, abstraido em símbolos na \autoref{subsection-symbols-scopes}, utilizados no programa estejam devidamente definidos antes de serem usados. Essa etapa inclui:

        \item Identificar declarações ausentes.
        \item Identificar dependencia circular.
        \item Certificar-se de que funções obrigatórias, como a BRDF $f$, estejam presentes.

dependencia
Essas validações são realizadas utilizando as funções do pacote \textit{walker} e os erros encontrados são reportados usando as funções de erros introduzida na \autoref{section-lexer}.

Essas validações são realizadas utilizando as funções do pacote \textit{walker} e os erros encontrados são reportados usando as funções de erros introduzida na \autoref{section-lexer}.



\subsection{Tipos, Simbolos e Escopos} \label{subsection-symbols-scopes}

\subsection{Tipos, Simbolos e Escopos} \label{subsection-symbols-scopes}

\subsubsection{Tipos}
No \autoref{cod-types-structs}, temos a representação de tipos segue uma modelagem hierárquica o \textbf{Tipo Base} contém metadados comuns
como referência ao nó na arvóre sintática, identificador de tipo concreto. Os \textbf{Tipos Derivados} são enumerados a seguir:

\begin{enumerate}
    \item \textit{Tipo Básico:} Categorização primitiva (número)
    \item \textit{Tipo Vetorial:}
    \begin{itemize}
        \item Dimensionalidade
        \item Tipo de elemento
    \end{itemize}
    \item \textit{Tipo Funcional:}
    \begin{itemize}
        \item Parâmetros
        \item Resultados
    \end{itemize}
\end{enumerate}


